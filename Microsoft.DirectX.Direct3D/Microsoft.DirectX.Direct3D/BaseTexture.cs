/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 Alistair Leslie-Hughes
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;

namespace Microsoft.DirectX.Direct3D
{
	public abstract class BaseTexture : Resource
	{
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new virtual IntPtr NativePointer {
			get {
				throw new NotImplementedException ();
			}
		}

		public ImageInformation ImageInformation {
			get {
				throw new NotImplementedException ();
			}
		}

		public TextureFilter AutoGeneratedFilterType {
			get {
				throw new NotImplementedException ();
			}
			set {
				throw new NotImplementedException ();
			}
		}

		public int LevelCount {
			get {
				throw new NotImplementedException ();
			}
		}

		public int LevelOfDetail {
			get {
				throw new NotImplementedException ();
			}
			set {
				throw new NotImplementedException ();
			}
		}
		
		public static bool operator == (BaseTexture left, BaseTexture right)
		{
			throw new NotImplementedException ();
		}
		
		public static bool operator != (BaseTexture left, BaseTexture right)
		{
			throw new NotImplementedException ();
		}
		
		public override bool Equals (object compare)
		{
			throw new NotImplementedException ();
		}

		public override int GetHashCode ()
		{
			throw new NotImplementedException ();
		}

		public int SetLevelOfDetail (int newLevelOfDetail)
		{
			throw new NotImplementedException ();
		}

		public void GenerateMipSubLevels ()
		{
			throw new NotImplementedException ();
		}

		public static ImageInformation GetImageInformationFromFile (string filename)
		{
			throw new NotImplementedException ();
		}

		public static ImageInformation GetImageInformationFromStream (Stream stream)
		{
			throw new NotImplementedException ();
		}

		public static ImageInformation GetImageInformationFromStream (Stream stream, int numberBytes)
		{
			throw new NotImplementedException ();
		}

		public void Save (string filename, ImageFileFormat format)
		{
			throw new NotImplementedException ();
		}

		public void Save (string filename, ImageFileFormat format, PaletteEntry[] sourcePalette)
		{
			throw new NotImplementedException ();
		}

		public GraphicsBuffer SaveToMemory (ImageFileFormat format)
		{
			throw new NotImplementedException ();
		}

		public GraphicsBuffer SaveToMemory (ImageFileFormat format, PaletteEntry[] sourcePalette)
		{
			throw new NotImplementedException ();
		}

		public void Filter (int level, Filter filter)
		{
			throw new NotImplementedException ();
		}

		public PaletteEntry[] FilterWithPalette (int level, Filter filter)
		{
			throw new NotImplementedException ();
		}
	
		public override string ToString ()
		{
			throw new NotImplementedException ();
		}

		public BaseTexture (IntPtr pInterface) : base( (IntPtr)null)
		{
			throw new NotImplementedException ();
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		public new virtual void UpdateNativePointer (IntPtr pInterface)
		{
			
		}

		protected override void Dispose (bool flag)
		{
			throw new NotImplementedException ();
		}
	}
}
